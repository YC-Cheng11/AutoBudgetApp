{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\UWE\\\\FYP\\\\AutoBudgetApplication\\\\pages\\\\Calendar\\\\CalendarPage.js\";\n\nimport React, { useState, Fragment } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Calendar } from 'react-native-calendars';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nvar testIDs = require(\"../testIDs\");\n\nvar CalendarsScreen = function CalendarsScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var onDayPress = function onDayPress(day) {\n    setSelected(day.dateString);\n  };\n\n  var getDisabledDates = function getDisabledDates(startDate, endDate, daysToDisable) {\n    var disabledDates = {};\n    var start = moment(startDate);\n    var end = moment(endDate);\n\n    for (var m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\n      if (_.includes(daysToDisable, m.weekday())) {\n        disabledDates[m.format('YYYY-MM-DD')] = {\n          disabled: true\n        };\n      }\n    }\n\n    return disabledDates;\n  };\n\n  var renderCalendarWithSelectableDate = function renderCalendarWithSelectableDate() {\n    return React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, \"Calendar with selectable date\"), React.createElement(Calendar, {\n      testID: testIDs.calendars.FIRST,\n      current: '2020-02-02',\n      style: styles.calendar,\n      hideExtraDays: true,\n      onDayPress: onDayPress,\n      markedDates: _defineProperty({}, selected, {\n        selected: true,\n        disableTouchEvent: true,\n        selectedColor: 'orange',\n        selectedTextColor: 'red'\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var renderCalendarWithCustomHeader = function renderCalendarWithCustomHeader() {\n    var CustomHeader = React.forwardRef(function (props, ref) {\n      return React.createElement(View, _extends({\n        ref: ref\n      }, props, {\n        style: {\n          backgroundColor: '#FCC',\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n          marginHorizontal: -4,\n          padding: 8\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }, \"This is a custom header!\"), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return console.log('Tapped!');\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, \"Tap Me\")));\n    });\n    return React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Calendar with custom header component\"), React.createElement(Calendar, {\n      testID: testIDs.calendars.LAST,\n      style: [styles.calendar, {\n        height: 250,\n        borderBottomWidth: 1,\n        borderBottomColor: 'lightgrey'\n      }],\n      customHeader: CustomHeader,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    testID: testIDs.calendars.CONTAINER,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, renderCalendarWithSelectableDate());\n};\n\nexport default CalendarsScreen;\nvar styles = StyleSheet.create({\n  calendar: {\n    marginBottom: 10\n  },\n  text: {\n    textAlign: 'center',\n    padding: 10,\n    backgroundColor: 'lightgrey',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["D:/UWE/FYP/AutoBudgetApplication/pages/Calendar/CalendarPage.js"],"names":["React","useState","Fragment","Calendar","moment","_","testIDs","require","CalendarsScreen","selected","setSelected","onDayPress","day","dateString","getDisabledDates","startDate","endDate","daysToDisable","disabledDates","start","end","m","diff","add","includes","weekday","format","disabled","renderCalendarWithSelectableDate","styles","text","calendars","FIRST","calendar","disableTouchEvent","selectedColor","selectedTextColor","renderCalendarWithCustomHeader","CustomHeader","forwardRef","props","ref","backgroundColor","flexDirection","justifyContent","marginHorizontal","padding","console","log","LAST","height","borderBottomWidth","borderBottomColor","CONTAINER","StyleSheet","create","marginBottom","textAlign","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport { StyleSheet, View, ScrollView, Text, TouchableOpacity } from 'react-native';\r\nimport { Calendar } from 'react-native-calendars';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\nconst testIDs = require('../testIDs');\r\n\r\nconst CalendarsScreen = () => {\r\n  const [selected, setSelected] = useState('');\r\n\r\n  const onDayPress = (day) => {\r\n    setSelected(day.dateString);\r\n  };\r\n\r\n  const getDisabledDates = (startDate, endDate, daysToDisable) => {\r\n    const disabledDates = {};\r\n    const start = moment(startDate);\r\n    const end = moment(endDate);\r\n    for (let m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\r\n      if (_.includes(daysToDisable, m.weekday())) {\r\n        disabledDates[m.format('YYYY-MM-DD')] = { disabled: true };\r\n      }\r\n    }\r\n    return disabledDates;\r\n  };\r\n\r\n  const renderCalendarWithSelectableDate = () => {\r\n    return (\r\n      <Fragment>\r\n        <Text style={styles.text}>Calendar with selectable date</Text>\r\n        <Calendar\r\n          testID={testIDs.calendars.FIRST}\r\n          current={'2020-02-02'}\r\n          style={styles.calendar}\r\n          hideExtraDays\r\n          onDayPress={onDayPress}\r\n          markedDates={{\r\n            [selected]: {\r\n              selected: true,\r\n              disableTouchEvent: true,\r\n              selectedColor: 'orange',\r\n              selectedTextColor: 'red',\r\n            },\r\n          }}\r\n        />\r\n      </Fragment>\r\n    );\r\n  };\r\n  const renderCalendarWithCustomHeader = () => {\r\n    const CustomHeader = React.forwardRef((props, ref) => {\r\n      return (\r\n        <View\r\n          ref={ref}\r\n          {...props}\r\n          style={{\r\n            backgroundColor: '#FCC',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-around',\r\n            marginHorizontal: -4,\r\n            padding: 8,\r\n          }}\r\n        >\r\n          <Text>This is a custom header!</Text>\r\n          <TouchableOpacity onPress={() => console.log('Tapped!')}>\r\n            <Text>Tap Me</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Fragment>\r\n        <Text style={styles.text}>Calendar with custom header component</Text>\r\n        <Calendar\r\n          testID={testIDs.calendars.LAST}\r\n          style={[\r\n            styles.calendar,\r\n            {\r\n              height: 250,\r\n              borderBottomWidth: 1,\r\n              borderBottomColor: 'lightgrey',\r\n            },\r\n          ]}\r\n          customHeader={CustomHeader}\r\n        />\r\n      </Fragment>\r\n    );\r\n  };\r\n  return (\r\n    <ScrollView showsVerticalScrollIndicator={false} testID={testIDs.calendars.CONTAINER}>\r\n      {renderCalendarWithSelectableDate()}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default CalendarsScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  calendar: {\r\n    marginBottom: 10,\r\n  },\r\n  text: {\r\n    textAlign: 'center',\r\n    padding: 10,\r\n    backgroundColor: 'lightgrey',\r\n    fontSize: 16,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}