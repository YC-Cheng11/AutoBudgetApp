{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\UWE\\\\FYP\\\\AutoBudgetApplication\\\\pages\\\\Calendar\\\\CalendarPage.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, Fragment } from 'react';\nimport dva, { connect } from 'dva';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Calendar } from 'react-native-calendars';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nvar CalendarPage = function (_React$PureComponent) {\n  _inherits(CalendarPage, _React$PureComponent);\n\n  var _super = _createSuper(CalendarPage);\n\n  function CalendarPage() {\n    var _this;\n\n    _classCallCheck(this, CalendarPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selected: ''\n    };\n\n    _this.onDayPress = function (day) {\n      _this.setState({\n        selected: day.dateString\n      });\n    };\n\n    _this.getDisabledDates = function (startDate, endDate, daysToDisable) {\n      var disabledDates = {};\n      var start = moment(startDate);\n      var end = moment(endDate);\n\n      for (var m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\n        if (_.includes(daysToDisable, m.weekday())) {\n          disabledDates[m.format('YYYY-MM-DD')] = {\n            disabled: true\n          };\n        }\n      }\n\n      return disabledDates;\n    };\n\n    _this.renderCalendarWithSelectableDate = function () {\n      var selected = _this.state.selected;\n      var navigation = _this.props.navigation;\n      return React.createElement(Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, React.createElement(Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }), React.createElement(Calendar, {\n        current: new Date(),\n        hideExtraDays: true,\n        onDayPress: _this.onDayPress,\n        markedDates: _defineProperty({}, selected, {\n          selected: true,\n          disableTouchEvent: true,\n          selectedColor: 'blue',\n          selectedTextColor: 'white'\n        }),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('CreateTask', {\n            \"currentDate\": \"2020-11-20\",\n            updateCurrentTask: _this._updateCurrentTask,\n            currentDate: currentDate\n          });\n        },\n        style: styles.viewTask,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../assets/plus.png\"),\n        style: {\n          height: 30,\n          width: 30\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(CalendarPage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(SafeAreaView, {\n        showsVerticalScrollIndicator: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, this.renderCalendarWithSelectableDate());\n    }\n  }]);\n\n  return CalendarPage;\n}(React.PureComponent);\n\nexport default connect(function (state) {\n  return {\n    loading: state.loading,\n    effects: state.loading.effects\n  };\n})(CalendarPage);\nvar styles = StyleSheet.create({\n  calendar: {\n    marginBottom: 10\n  },\n  text: {\n    textAlign: 'center',\n    padding: 10,\n    backgroundColor: 'lightgrey',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["D:/UWE/FYP/AutoBudgetApplication/pages/Calendar/CalendarPage.js"],"names":["React","useState","Fragment","dva","connect","Calendar","moment","_","CalendarPage","state","selected","onDayPress","day","setState","dateString","getDisabledDates","startDate","endDate","daysToDisable","disabledDates","start","end","m","diff","add","includes","weekday","format","disabled","renderCalendarWithSelectableDate","navigation","props","Date","disableTouchEvent","selectedColor","selectedTextColor","navigate","updateCurrentTask","_updateCurrentTask","currentDate","styles","viewTask","require","height","width","PureComponent","loading","effects","StyleSheet","create","calendar","marginBottom","text","textAlign","padding","backgroundColor","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport dva, { connect } from 'dva';\r\nimport { StyleSheet, View, Image, SafeAreaView, Text, TouchableOpacity } from 'react-native';\r\nimport { Calendar } from 'react-native-calendars';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\nclass CalendarPage extends React.PureComponent {\r\n  state = {\r\n    selected: ''\r\n  }\r\n\r\n  onDayPress = (day) => {\r\n    this.setState({\r\n      selected: day.dateString\r\n    })\r\n  };\r\n\r\n  getDisabledDates = (startDate, endDate, daysToDisable) => {\r\n    const disabledDates = {};\r\n    const start = moment(startDate);\r\n    const end = moment(endDate);\r\n    for (let m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\r\n      if (_.includes(daysToDisable, m.weekday())) {\r\n        disabledDates[m.format('YYYY-MM-DD')] = { disabled: true };\r\n      }\r\n    }\r\n    return disabledDates;\r\n  };\r\n\r\n  renderCalendarWithSelectableDate = () => {\r\n    const { selected } = this.state;\r\n    const { navigation } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <Fragment></Fragment>\r\n        <Calendar\r\n          current={new Date()}\r\n          // style={styles.calendar}\r\n          hideExtraDays\r\n          onDayPress={this.onDayPress}\r\n          markedDates={{\r\n            [selected]: {\r\n              selected: true,\r\n              disableTouchEvent: true,\r\n              selectedColor: 'blue',\r\n              selectedTextColor: 'white',\r\n            },\r\n          }}\r\n        />\r\n        <TouchableOpacity\r\n          onPress={() =>\r\n            navigation.navigate('CreateTask', {\r\n              \"currentDate\": \"2020-11-20\",\r\n              updateCurrentTask: this._updateCurrentTask,\r\n              currentDate,\r\n              // createNewCalendar: this._createNewCalendar,\r\n            })\r\n          }\r\n          style={styles.viewTask}\r\n        >\r\n          <Image\r\n            source={require('../../assets/plus.png')}\r\n            style={{\r\n              height: 30,\r\n              width: 30,\r\n            }}\r\n          />\r\n        </TouchableOpacity>\r\n      </Fragment>\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <SafeAreaView showsVerticalScrollIndicator={false} >\r\n        { this.renderCalendarWithSelectableDate()}\r\n      </SafeAreaView>\r\n    );\r\n  };\r\n}\r\nexport default connect(state => ({\r\n  loading: state.loading,\r\n  effects: state.loading.effects\r\n}))(CalendarPage);\r\n\r\nconst styles = StyleSheet.create({\r\n  calendar: {\r\n    marginBottom: 10,\r\n  },\r\n  text: {\r\n    textAlign: 'center',\r\n    padding: 10,\r\n    backgroundColor: 'lightgrey',\r\n    fontSize: 16,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}