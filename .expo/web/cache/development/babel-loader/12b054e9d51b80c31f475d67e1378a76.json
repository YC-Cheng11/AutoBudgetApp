{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\UWE\\\\FYP\\\\AutoBudgetApplication\\\\pages\\\\Calendar\\\\CalendarPage.js\";\n\nimport React, { useState, Fragment } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Calendar } from 'react-native-calendars';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nvar CalendarsScreen = function CalendarsScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var onDayPress = function onDayPress(day) {\n    setSelected(day.dateString);\n  };\n\n  var getDisabledDates = function getDisabledDates(startDate, endDate, daysToDisable) {\n    var disabledDates = {};\n    var start = moment(startDate);\n    var end = moment(endDate);\n\n    for (var m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\n      if (_.includes(daysToDisable, m.weekday())) {\n        disabledDates[m.format('YYYY-MM-DD')] = {\n          disabled: true\n        };\n      }\n    }\n\n    return disabledDates;\n  };\n\n  var renderCalendarWithSelectableDate = function renderCalendarWithSelectableDate() {\n    return React.createElement(Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, React.createElement(Calendar, {\n      current: new Date(),\n      style: styles.calendar,\n      hideExtraDays: true,\n      onDayPress: onDayPress,\n      markedDates: _defineProperty({}, selected, {\n        selected: true,\n        disableTouchEvent: true,\n        selectedColor: 'orange',\n        selectedTextColor: 'red'\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    testID: testIDs.calendars.CONTAINER,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, renderCalendarWithSelectableDate());\n};\n\nexport default CalendarsScreen;\nvar styles = StyleSheet.create({\n  calendar: {\n    marginBottom: 10\n  },\n  text: {\n    textAlign: 'center',\n    padding: 10,\n    backgroundColor: 'lightgrey',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["D:/UWE/FYP/AutoBudgetApplication/pages/Calendar/CalendarPage.js"],"names":["React","useState","Fragment","Calendar","moment","_","CalendarsScreen","selected","setSelected","onDayPress","day","dateString","getDisabledDates","startDate","endDate","daysToDisable","disabledDates","start","end","m","diff","add","includes","weekday","format","disabled","renderCalendarWithSelectableDate","Date","styles","calendar","disableTouchEvent","selectedColor","selectedTextColor","testIDs","calendars","CONTAINER","StyleSheet","create","marginBottom","text","textAlign","padding","backgroundColor","fontSize"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;;;;;;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAAA,kBACIL,QAAQ,CAAC,EAAD,CADZ;AAAA;AAAA,MACrBM,QADqB;AAAA,MACXC,WADW;;AAG5B,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAC1BF,IAAAA,WAAW,CAACE,GAAG,CAACC,UAAL,CAAX;AACD,GAFD;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,aAArB,EAAuC;AAC9D,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,KAAK,GAAGb,MAAM,CAACS,SAAD,CAApB;AACA,QAAMK,GAAG,GAAGd,MAAM,CAACU,OAAD,CAAlB;;AACA,SAAK,IAAIK,CAAC,GAAGf,MAAM,CAACa,KAAD,CAAnB,EAA4BE,CAAC,CAACC,IAAF,CAAOF,GAAP,EAAY,MAAZ,KAAuB,CAAnD,EAAsDC,CAAC,CAACE,GAAF,CAAM,CAAN,EAAS,MAAT,CAAtD,EAAwE;AACtE,UAAIhB,CAAC,CAACiB,QAAF,CAAWP,aAAX,EAA0BI,CAAC,CAACI,OAAF,EAA1B,CAAJ,EAA4C;AAC1CP,QAAAA,aAAa,CAACG,CAAC,CAACK,MAAF,CAAS,YAAT,CAAD,CAAb,GAAwC;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAxC;AACD;AACF;;AACD,WAAOT,aAAP;AACD,GAVD;;AAYA,MAAMU,gCAAgC,GAAG,SAAnCA,gCAAmC,GAAM;AAC7C,WACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AACE,MAAA,OAAO,EAAE,IAAIC,IAAJ,EADX;AAEE,MAAA,KAAK,EAAEC,MAAM,CAACC,QAFhB;AAGE,MAAA,aAAa,MAHf;AAIE,MAAA,UAAU,EAAEpB,UAJd;AAKE,MAAA,WAAW,sBACRF,QADQ,EACG;AACVA,QAAAA,QAAQ,EAAE,IADA;AAEVuB,QAAAA,iBAAiB,EAAE,IAFT;AAGVC,QAAAA,aAAa,EAAE,QAHL;AAIVC,QAAAA,iBAAiB,EAAE;AAJT,OADH,CALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAkBD,GAnBD;;AAqBA,SACE,oBAAC,UAAD;AAAY,IAAA,4BAA4B,EAAE,KAA1C;AAAiD,IAAA,MAAM,EAAEC,OAAO,CAACC,SAAR,CAAkBC,SAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,gCAAgC,EADnC,CADF;AAKD,CA7CD;;AA+CA,eAAepB,eAAf;AAEA,IAAMsB,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,QAAQ,EAAE;AACRS,IAAAA,YAAY,EAAE;AADN,GADqB;AAI/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE,QADP;AAEJC,IAAAA,OAAO,EAAE,EAFL;AAGJC,IAAAA,eAAe,EAAE,WAHb;AAIJC,IAAAA,QAAQ,EAAE;AAJN;AAJyB,CAAlB,CAAf","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport { StyleSheet, View, ScrollView, Text, TouchableOpacity } from 'react-native';\r\nimport { Calendar } from 'react-native-calendars';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\nconst CalendarsScreen = () => {\r\n  const [selected, setSelected] = useState('');\r\n\r\n  const onDayPress = (day) => {\r\n    setSelected(day.dateString);\r\n  };\r\n\r\n  const getDisabledDates = (startDate, endDate, daysToDisable) => {\r\n    const disabledDates = {};\r\n    const start = moment(startDate);\r\n    const end = moment(endDate);\r\n    for (let m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\r\n      if (_.includes(daysToDisable, m.weekday())) {\r\n        disabledDates[m.format('YYYY-MM-DD')] = { disabled: true };\r\n      }\r\n    }\r\n    return disabledDates;\r\n  };\r\n\r\n  const renderCalendarWithSelectableDate = () => {\r\n    return (\r\n      <Fragment>\r\n        <Calendar\r\n          current={new Date()}\r\n          style={styles.calendar}\r\n          hideExtraDays\r\n          onDayPress={onDayPress}\r\n          markedDates={{\r\n            [selected]: {\r\n              selected: true,\r\n              disableTouchEvent: true,\r\n              selectedColor: 'orange',\r\n              selectedTextColor: 'red',\r\n            },\r\n          }}\r\n        />\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ScrollView showsVerticalScrollIndicator={false} testID={testIDs.calendars.CONTAINER}>\r\n      {renderCalendarWithSelectableDate()}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default CalendarsScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  calendar: {\r\n    marginBottom: 10,\r\n  },\r\n  text: {\r\n    textAlign: 'center',\r\n    padding: 10,\r\n    backgroundColor: 'lightgrey',\r\n    fontSize: 16,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}