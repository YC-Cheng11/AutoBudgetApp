{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\UWE\\\\FYP\\\\AutoBudgetApplication\\\\pages\\\\RecordList\\\\MonthlyExpense.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, Fragment } from 'react';\nimport dva, { connect } from 'dva';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\n\nvar MonthlyExpense = function (_React$PureComponent) {\n  _inherits(MonthlyExpense, _React$PureComponent);\n\n  var _super = _createSuper(MonthlyExpense);\n\n  function MonthlyExpense() {\n    var _this;\n\n    _classCallCheck(this, MonthlyExpense);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(MonthlyExpense, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          todoList = _this$props.todoList,\n          currentDate = _this$props.currentDate;\n      console.log(todoList);\n      return React.createElement(View, {\n        style: {\n          width: '100%',\n          height: Dimensions.get('window').height - 170\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 7\n        }\n      }, React.createElement(ScrollView, {\n        contentContainerStyle: {\n          paddingBottom: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      }, todoList.map(function (item) {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            _this2.setState({\n              selectedTask: item,\n              isModalVisible: true\n            }, function () {});\n          },\n          key: item.key,\n          style: styles.taskListContent,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }\n        }, React.createElement(View, {\n          style: {\n            marginLeft: 13\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: {\n            height: 12,\n            width: 12,\n            borderRadius: 6,\n            backgroundColor: item.color,\n            marginRight: 8\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 19\n          }\n        }), React.createElement(Text, {\n          style: {\n            color: '#554A4C',\n            fontSize: 20\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 19\n          }\n        }, item.category, \":\", item.item)), React.createElement(View, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            marginLeft: 20\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 19\n          }\n        }, React.createElement(Text, {\n          style: {\n            color: '#BBBBBB',\n            fontSize: 14\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }\n        }, item.notes)))));\n      })));\n    }\n  }]);\n\n  return MonthlyExpense;\n}(React.PureComponent);\n\nexport default connect(function (state) {\n  return {\n    loading: state.loading,\n    effects: state.loading.effects\n  };\n})(MonthlyExpense);\nvar styles = StyleSheet.create({\n  calendar: {\n    marginBottom: 10\n  },\n  text: {\n    textAlign: 'center',\n    padding: 10,\n    backgroundColor: 'lightgrey',\n    fontSize: 16\n  },\n  viewTask: {\n    position: 'absolute',\n    top: 0,\n    right: 17,\n    height: 50,\n    width: 50,\n    backgroundColor: 'orange',\n    borderRadius: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#2E66E7',\n    shadowOpacity: 0.5,\n    elevation: 5,\n    zIndex: 999\n  }\n});","map":{"version":3,"sources":["D:/UWE/FYP/AutoBudgetApplication/pages/RecordList/MonthlyExpense.js"],"names":["React","useState","Fragment","dva","connect","MonthlyExpense","state","props","todoList","currentDate","console","log","width","height","Dimensions","get","paddingBottom","map","item","setState","selectedTask","isModalVisible","key","styles","taskListContent","marginLeft","flexDirection","alignItems","borderRadius","backgroundColor","color","marginRight","fontSize","category","notes","PureComponent","loading","effects","StyleSheet","create","calendar","marginBottom","text","textAlign","padding","viewTask","position","top","right","justifyContent","shadowColor","shadowOpacity","elevation","zIndex"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,GAAP,IAAcC,OAAd,QAA6B,KAA7B;;;;;;;;;;IAEMC,c;;;;;;;;;;;;;;;UACJC,K,GAAQ,E;;;;;;6BAIC;AAAA;;AAAA,wBAC2B,KAAKC,KADhC;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,WADX,eACWA,WADX;AAEPC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLI,UAAAA,KAAK,EAAE,MADF;AAELC,UAAAA,MAAM,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,MAAzB,GAAkC;AAFrC,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME,oBAAC,UAAD;AACE,QAAA,qBAAqB,EAAE;AACrBG,UAAAA,aAAa,EAAE;AADM,SADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKGR,QAAQ,CAACS,GAAT,CAAa,UAAAC,IAAI;AAAA,eAChB,oBAAC,gBAAD;AACE,UAAA,OAAO,EAAE,mBAAM;AACb,YAAA,MAAI,CAACC,QAAL,CACE;AACEC,cAAAA,YAAY,EAAEF,IADhB;AAEEG,cAAAA,cAAc,EAAE;AAFlB,aADF,EAKE,YAAM,CAEL,CAPH;AASD,WAXH;AAYE,UAAA,GAAG,EAAEH,IAAI,CAACI,GAZZ;AAaE,UAAA,KAAK,EAAEC,MAAM,CAACC,eAbhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAeE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLC,YAAAA,UAAU,EAAE;AADP,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLC,YAAAA,aAAa,EAAE,KADV;AAELC,YAAAA,UAAU,EAAE;AAFP,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLd,YAAAA,MAAM,EAAE,EADH;AAELD,YAAAA,KAAK,EAAE,EAFF;AAGLgB,YAAAA,YAAY,EAAE,CAHT;AAILC,YAAAA,eAAe,EAAEX,IAAI,CAACY,KAJjB;AAKLC,YAAAA,WAAW,EAAE;AALR,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANF,EAeE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLD,YAAAA,KAAK,EAAE,SADF;AAELE,YAAAA,QAAQ,EAAE;AAFL,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOGd,IAAI,CAACe,QAPR,OAOmBf,IAAI,CAACA,IAPxB,CAfF,CALF,EA8BE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLQ,YAAAA,aAAa,EAAE,KADV;AAELD,YAAAA,UAAU,EAAE;AAFP,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE;AACLK,YAAAA,KAAK,EAAE,SADF;AAELE,YAAAA,QAAQ,EAAE;AAFL,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMGd,IAAI,CAACgB,KANR,CANF,CADF,CA9BF,CAfF,CADgB;AAAA,OAAjB,CALH,CANF,CADF;AAyFD;;;;EAjG0BlC,KAAK,CAACmC,a;;AAmGnC,eAAe/B,OAAO,CAAC,UAAAE,KAAK;AAAA,SAAK;AAC/B8B,IAAAA,OAAO,EAAE9B,KAAK,CAAC8B,OADgB;AAE/BC,IAAAA,OAAO,EAAE/B,KAAK,CAAC8B,OAAN,CAAcC;AAFQ,GAAL;AAAA,CAAN,CAAP,CAGXhC,cAHW,CAAf;AAKA,IAAMkB,MAAM,GAAGe,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE;AADN,GADqB;AAI/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE,QADP;AAEJC,IAAAA,OAAO,EAAE,EAFL;AAGJf,IAAAA,eAAe,EAAE,WAHb;AAIJG,IAAAA,QAAQ,EAAE;AAJN,GAJyB;AAU/Ba,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,UADF;AAERC,IAAAA,GAAG,EAAE,CAFG;AAGRC,IAAAA,KAAK,EAAE,EAHC;AAIRnC,IAAAA,MAAM,EAAE,EAJA;AAKRD,IAAAA,KAAK,EAAE,EALC;AAMRiB,IAAAA,eAAe,EAAE,QANT;AAORD,IAAAA,YAAY,EAAE,EAPN;AAQRqB,IAAAA,cAAc,EAAE,QARR;AASRtB,IAAAA,UAAU,EAAE,QATJ;AAURuB,IAAAA,WAAW,EAAE,SAVL;AAgBRC,IAAAA,aAAa,EAAE,GAhBP;AAiBRC,IAAAA,SAAS,EAAE,CAjBH;AAkBRC,IAAAA,MAAM,EAAE;AAlBA;AAVqB,CAAlB,CAAf","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport dva, { connect } from 'dva';\r\nimport { StyleSheet, View, Image, SafeAreaView, Text, TouchableOpacity, Dimensions, ScrollView } from 'react-native';\r\nclass MonthlyExpense extends React.PureComponent {\r\n  state = {\r\n\r\n  }\r\n  // Local path to file on the device\r\n  render() {\r\n    const { todoList, currentDate } = this.props;\r\n    console.log(todoList);\r\n    return (\r\n      <View\r\n        style={{\r\n          width: '100%',\r\n          height: Dimensions.get('window').height - 170,\r\n        }}\r\n      >\r\n        <ScrollView\r\n          contentContainerStyle={{\r\n            paddingBottom: 20,\r\n          }}\r\n        >\r\n          {todoList.map(item => (\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                this.setState(\r\n                  {\r\n                    selectedTask: item,\r\n                    isModalVisible: true,\r\n                  },\r\n                  () => {\r\n                    // this._getEvent();\r\n                  }\r\n                );\r\n              }}\r\n              key={item.key}\r\n              style={styles.taskListContent}\r\n            >\r\n              <View\r\n                style={{\r\n                  marginLeft: 13,\r\n                }}\r\n              >\r\n                <View\r\n                  style={{\r\n                    flexDirection: 'row',\r\n                    alignItems: 'center',\r\n                  }}\r\n                >\r\n                  <View\r\n                    style={{\r\n                      height: 12,\r\n                      width: 12,\r\n                      borderRadius: 6,\r\n                      backgroundColor: item.color,\r\n                      marginRight: 8,\r\n                    }}\r\n                  />\r\n                  <Text\r\n                    style={{\r\n                      color: '#554A4C',\r\n                      fontSize: 20,\r\n                      // fontWeight: '700',\r\n                    }}\r\n                  >\r\n                    {item.category}:{item.item}\r\n                  </Text>\r\n                </View>\r\n                <View>\r\n                  <View\r\n                    style={{\r\n                      flexDirection: 'row',\r\n                      marginLeft: 20,\r\n                    }}\r\n                  >\r\n                    <Text\r\n                      style={{\r\n                        color: '#BBBBBB',\r\n                        fontSize: 14,\r\n                      }}\r\n                    >\r\n                      {item.notes}\r\n                    </Text>\r\n                  </View>\r\n                </View>\r\n              </View>\r\n              {/* <View\r\n              style={{\r\n                height: 80,\r\n                width: 5,\r\n                backgroundColor: item.color,\r\n                borderRadius: 5,\r\n              }}\r\n            /> */}\r\n            </TouchableOpacity>\r\n          ))}\r\n        </ScrollView>\r\n      </View>\r\n    )\r\n  }\r\n}\r\nexport default connect(state => ({\r\n  loading: state.loading,\r\n  effects: state.loading.effects\r\n}))(MonthlyExpense);\r\n\r\nconst styles = StyleSheet.create({\r\n  calendar: {\r\n    marginBottom: 10,\r\n  },\r\n  text: {\r\n    textAlign: 'center',\r\n    padding: 10,\r\n    backgroundColor: 'lightgrey',\r\n    fontSize: 16,\r\n  },\r\n  viewTask: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 17,\r\n    height: 50,\r\n    width: 50,\r\n    backgroundColor: 'orange',\r\n    borderRadius: 30,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    shadowColor: '#2E66E7',\r\n    // shadowOffset: {\r\n    //   width: 0,\r\n    //   height: 5,\r\n    // },\r\n    // shadowRadius: 30,\r\n    shadowOpacity: 0.5,\r\n    elevation: 5,\r\n    zIndex: 999,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}