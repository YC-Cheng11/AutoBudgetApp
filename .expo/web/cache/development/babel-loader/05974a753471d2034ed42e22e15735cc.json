{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\UWE\\\\FYP\\\\AutoBudgetApplication\\\\pages\\\\Calendar\\\\CalendarPage.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, Fragment } from 'react';\nimport dva, { connect } from 'dva';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Calendar } from 'react-native-calendars';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nvar CalendarPage = function (_React$PureComponent) {\n  _inherits(CalendarPage, _React$PureComponent);\n\n  var _super = _createSuper(CalendarPage);\n\n  function CalendarPage() {\n    var _this;\n\n    _classCallCheck(this, CalendarPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      selected: '',\n      datesWhitelist: [{\n        start: moment(),\n        end: moment().add(365, 'days')\n      }],\n      todoList: [],\n      markedDate: [],\n      currentDate: moment().format('YYYY') + \"-\" + moment().format('MM') + \"-\" + moment().format('DD'),\n      isModalVisible: false,\n      selectedTask: null,\n      isDateTimePickerVisible: false\n    };\n\n    _this.onDayPress = function (day) {\n      _this.setState({\n        selected: day.dateString\n      });\n    };\n\n    _this.getDisabledDates = function (startDate, endDate, daysToDisable) {\n      var disabledDates = {};\n      var start = moment(startDate);\n      var end = moment(endDate);\n\n      for (var m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\n        if (_.includes(daysToDisable, m.weekday())) {\n          disabledDates[m.format('YYYY-MM-DD')] = {\n            disabled: true\n          };\n        }\n      }\n\n      return disabledDates;\n    };\n\n    _this._updateCurrentTask = function _callee(currentDate) {\n      var value, todoList, markDot, todoLists;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('TODO'));\n\n            case 3:\n              value = _context.sent;\n\n              if (value !== null) {\n                todoList = JSON.parse(value);\n                markDot = todoList.map(function (item) {\n                  return item.markedDot;\n                });\n                todoLists = todoList.filter(function (item) {\n                  if (currentDate === item.date) {\n                    return true;\n                  }\n\n                  return false;\n                });\n\n                if (todoLists.length !== 0) {\n                  _this.setState({\n                    markedDate: markDot,\n                    todoList: todoLists[0].todoList\n                  });\n                } else {\n                  _this.setState({\n                    markedDate: markDot,\n                    todoList: []\n                  });\n                }\n              }\n\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n\n    _this.renderCalendarWithSelectableDate = function () {\n      var _this$state = _this.state,\n          selected = _this$state.selected,\n          currentDate = _this$state.currentDate;\n      var navigation = _this.props.navigation;\n      return React.createElement(Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }\n      }, React.createElement(Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }), React.createElement(Calendar, {\n        current: new Date(),\n        hideExtraDays: true,\n        onDayPress: _this.onDayPress,\n        markedDates: _defineProperty({}, selected, {\n          selected: true,\n          disableTouchEvent: true,\n          selectedColor: 'orange',\n          selectedTextColor: 'white'\n        }),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('CreateTask', {\n            updateCurrentTask: _this._updateCurrentTask,\n            currentDate: currentDate,\n            createNewCalendar: _this._createNewCalendar\n          });\n        },\n        style: styles.viewTask,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../../assets/plus.png\"),\n        style: {\n          height: 30,\n          width: 30\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(CalendarPage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(SafeAreaView, {\n        showsVerticalScrollIndicator: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 7\n        }\n      }, this.renderCalendarWithSelectableDate());\n    }\n  }]);\n\n  return CalendarPage;\n}(React.PureComponent);\n\nexport default connect(function (state) {\n  return {\n    loading: state.loading,\n    effects: state.loading.effects\n  };\n})(CalendarPage);\nvar styles = StyleSheet.create({\n  calendar: {\n    marginBottom: 10\n  },\n  text: {\n    textAlign: 'center',\n    padding: 10,\n    backgroundColor: 'lightgrey',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["D:/UWE/FYP/AutoBudgetApplication/pages/Calendar/CalendarPage.js"],"names":["React","useState","Fragment","dva","connect","Calendar","moment","_","CalendarPage","state","selected","datesWhitelist","start","end","add","todoList","markedDate","currentDate","format","isModalVisible","selectedTask","isDateTimePickerVisible","onDayPress","day","setState","dateString","getDisabledDates","startDate","endDate","daysToDisable","disabledDates","m","diff","includes","weekday","disabled","_updateCurrentTask","AsyncStorage","getItem","value","JSON","parse","markDot","map","item","markedDot","todoLists","filter","date","length","renderCalendarWithSelectableDate","navigation","props","Date","disableTouchEvent","selectedColor","selectedTextColor","navigate","updateCurrentTask","createNewCalendar","_createNewCalendar","styles","viewTask","require","height","width","PureComponent","loading","effects","StyleSheet","create","calendar","marginBottom","text","textAlign","padding","backgroundColor","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\nimport dva, { connect } from 'dva';\r\nimport { StyleSheet, View, Image, SafeAreaView, Text, TouchableOpacity } from 'react-native';\r\nimport { Calendar } from 'react-native-calendars';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\nclass CalendarPage extends React.PureComponent {\r\n  state = {\r\n    selected: '',\r\n    datesWhitelist: [\r\n      {\r\n        start: moment(),\r\n        end: moment().add(365, 'days'), // total 4 days enabled\r\n      },\r\n    ],\r\n    todoList: [],\r\n    markedDate: [],\r\n    currentDate: `${moment().format('YYYY')}-${moment().format(\r\n      'MM'\r\n    )}-${moment().format('DD')}`,\r\n    isModalVisible: false,\r\n    selectedTask: null,\r\n    isDateTimePickerVisible: false,\r\n  }\r\n\r\n  onDayPress = (day) => {\r\n    this.setState({\r\n      selected: day.dateString\r\n    })\r\n  };\r\n\r\n  getDisabledDates = (startDate, endDate, daysToDisable) => {\r\n    const disabledDates = {};\r\n    const start = moment(startDate);\r\n    const end = moment(endDate);\r\n    for (let m = moment(start); m.diff(end, 'days') <= 0; m.add(1, 'days')) {\r\n      if (_.includes(daysToDisable, m.weekday())) {\r\n        disabledDates[m.format('YYYY-MM-DD')] = { disabled: true };\r\n      }\r\n    }\r\n    return disabledDates;\r\n  };\r\n\r\n\r\n  _updateCurrentTask = async currentDate => {\r\n    try {\r\n      const value = await AsyncStorage.getItem('TODO');\r\n      if (value !== null) {\r\n        const todoList = JSON.parse(value);\r\n        const markDot = todoList.map(item => item.markedDot);\r\n        const todoLists = todoList.filter(item => {\r\n          if (currentDate === item.date) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        if (todoLists.length !== 0) {\r\n          this.setState({\r\n            markedDate: markDot,\r\n            todoList: todoLists[0].todoList,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            markedDate: markDot,\r\n            todoList: [],\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Error retrieving data\r\n    }\r\n  };\r\n  renderCalendarWithSelectableDate = () => {\r\n    const { selected, currentDate } = this.state;\r\n    const { navigation } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <Fragment></Fragment>\r\n        <Calendar\r\n          current={new Date()}\r\n          // style={styles.calendar}\r\n          hideExtraDays\r\n          onDayPress={this.onDayPress}\r\n          markedDates={{\r\n            [selected]: {\r\n              selected: true,\r\n              disableTouchEvent: true,\r\n              selectedColor: 'orange',\r\n              selectedTextColor: 'white',\r\n            },\r\n          }}\r\n        />\r\n        <TouchableOpacity\r\n          onPress={() =>\r\n            navigation.navigate('CreateTask', {\r\n              updateCurrentTask: this._updateCurrentTask,\r\n              currentDate,\r\n              createNewCalendar: this._createNewCalendar,\r\n            })\r\n          }\r\n          style={styles.viewTask}\r\n        >\r\n          <Image\r\n            source={require('../../../assets/plus.png')}\r\n            style={{\r\n              height: 30,\r\n              width: 30,\r\n            }}\r\n          />\r\n        </TouchableOpacity>\r\n      </Fragment>\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <SafeAreaView showsVerticalScrollIndicator={false} >\r\n        { this.renderCalendarWithSelectableDate()}\r\n      </SafeAreaView>\r\n    );\r\n  };\r\n}\r\nexport default connect(state => ({\r\n  loading: state.loading,\r\n  effects: state.loading.effects\r\n}))(CalendarPage);\r\n\r\nconst styles = StyleSheet.create({\r\n  calendar: {\r\n    marginBottom: 10,\r\n  },\r\n  text: {\r\n    textAlign: 'center',\r\n    padding: 10,\r\n    backgroundColor: 'lightgrey',\r\n    fontSize: 16,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}